====================================Model Validate====================================

Created 星期五 14 七月 2017


===============ActiveRecordError====================
active_record中所有的错误信息都继承自ActiveRecordError,而 ActiveRecordError < StandardError.
activeRecord中error类有:
1: 当单表继承找不到子类时引发    SubclassNotFound
2: 关联的对象的类型不正确时引发   AssociationTypeMismatch
3: 可序列化字段指定的类型不匹配时引发   SerializationTypeMismatch
4: 给定ID或ID集找到记录时引发         RecordNotFound
5: save!抛出异常                    RecordNotSaved
6: destroy!抛出异常                 RecordNotDestroyed
==================validates=====================

查看Model的验证有哪些
User.validators

==> [#<ActiveModel：：Validations::PresenceValidator:0x182c494 @attributes=[:email] @options={}>]

User.validates_on(:email)

==> [#<ActiveModel：：Validations::PresenceValidator:0x182c494 @attributes=[:email] @options={}>]

===========view 中添加 *===========

<%= mark_required(@user, :email) %>

def mark_required(object, attribute)
  "*" if object.class.validators_on(attribute).map(&:class).include? ActiveModel::Validations::PresenceValidator
end

==========自定义validates==========

 validates :email, presence: true, uniqueness: true, :format => {:with => /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i}

 调整后：

 可以将format提取出来

 lib/email_format_validator.rb
validate 源码会根据给出的参数去调用 ActiveModel::EachValidator的子类，调用validate_each

class EmailFormatValidator < ActiveModel::EachValidator
  def validate_each(object, attribute, value)
    unless value =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
      object.errors[attribute] << (options[:message] || "is not formatted properly") 
    end
  end
end

model中

validates :email, presence: true, uniqueness: true, email_format: true

=======说明==========
 继承 ActiveModel::Validator 必须是现实validate(record)方法
 值得注意的是 整个应用程序，验证程序只初始化一次,最简单的自定义验证validate 是继承ActiveModel::EachValidator
========ActiveModel::EachValidator===
再具体的子类中实现validate_each方法
 def validate(record)
   attributes.each do |attribute|
    # read_attribute_for_validation 是send的别名方法
     value = record.read_attribute_for_validation(attribute)
     next if (value.nil? && options[:allow_nil]) || (value.blank? && options[:allow_blank])
     validate_each(record, attribute, value)
   end
 end

 # Override this method in subclasses with the validation logic, adding
 # errors to the records +errors+ array where necessary.
 def validate_each(record, attribute, value)
   raise NotImplementedError, "Subclasses must implement a validate_each(record, attribute, value) method"
 end
 
